Index: GUI.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\nfrom matplotlib import figure\r\nfrom numpy import *\r\nfrom tkinter.filedialog import askopenfilename\r\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\r\nfrom filePlotter import *\r\n\r\nconfig = {}\r\n\r\nclass AudioGUI: # execute logic if run directly\r\n    def __init__(self):\r\n        self._root = tk.Tk() # instantiate instance of Tk class\r\n        self._root.title('Audio File Processor')\r\n        self._root.iconbitmap(\"WAVIS.ico\")\r\n        self.wave_plot = None\r\n        self.file_path = None\r\n\r\n        #Analysis variables\r\n        self.file_name = tk.StringVar()\r\n        self.file_frequency = tk.StringVar()\r\n\r\n        self.model = None\r\n\r\n    def start_gui(self):\r\n        self._root.mainloop()\r\n\r\n    def create_gui(self):\r\n        \r\n        #Create the window and establish close condition.\r\n        self._root.deiconify()\r\n        self._root.resizable(False, False)\r\n        self._root.geometry(\"800x600\")\r\n        self.file_path=tk.StringVar()\r\n        \r\n        #self.name_entry = tk.Entry(self._root,textvariable = file_path, font=('calibre',10,'normal'))\r\n\r\n        self.LoadBtn = tk.Button(self._root, text=\"Load Audio File (WAV/MP3)\", command=self.print_ligma)\r\n        \r\n        #Establishes the title top frame which organizes the buttons in the GUI\r\n\r\n        self._top_frame = tk.Frame(self._root)\r\n        self._top_frame.pack(side=tk.TOP, pady=20)\r\n        self.LoadBtn.pack(padx=10)\r\n\r\n        self.button_frame = tk.Frame(self._root)\r\n        self.button_frame.pack(side=tk.TOP, anchor = \"n\")\r\n\r\n\r\n\r\n        #self.name_entry.pack(padx=10)\r\n\r\n        high_freq_radio= tk.Button(self.button_frame, text='High Frequency', command = self.plot_high)\r\n        high_freq_radio.grid(row=0, column=1,padx=5, pady=2, sticky=\"W\")\r\n\r\n        med_freq_radio = tk.Button(self.button_frame, text='Mid Frequency', command = self.plot_mid)\r\n        med_freq_radio.grid(row=0, column=2, padx=5, pady=2, sticky=\"W\")\r\n\r\n        low_freq_radio = tk.Button(self.button_frame, text='Low Frequency', command = self.plot_low)\r\n        low_freq_radio.grid(row=0, column=3, padx=5, pady=2, sticky=\"W\")\r\n\r\n        plot_all_rt60_button = tk.Button(self.button_frame, text='Plot  All RT60', command=self.plot_all)\r\n        plot_all_rt60_button.grid(row=0, column=4, padx=5, pady=2, sticky=\"W\")\r\n\r\n        waveform_button = tk.Button(self.button_frame, text='Waveform', command = self.Plot_wave)\r\n        waveform_button.grid(row=0, column=5, padx=5, pady=2, sticky=\"W\")\r\n\r\n        spectro_button = tk.Button(self.button_frame, text='Spectrogram', command = self.Plot_spectrogram)\r\n        spectro_button.grid(row=0, column=6, padx=5, pady=2, sticky=\"W\")\r\n\r\n        \r\n        #Set up the frame for the details about the graph supporting text. \r\n        #Accessed from the Plot_Data function.\r\n        self.status_frame = tk.Frame(self._root)\r\n        self.status_frame.pack(side=tk.BOTTOM, pady=10)\r\n\r\n        self.file_label = tk.Label(self.status_frame, text= \"\")\r\n        self.file_label.pack(side=tk.BOTTOM)\r\n\r\n        \r\n\r\n    def Plot_wave(self):\r\n        if self.file_path is not None:\r\n            if self.wave_plot is not None:\r\n                self.wave_plot.get_tk_widget().pack_forget()\r\n\r\n            #Plotting the wave function should also establish the values in the labels at the bottom of the figure,\r\n            #which displays values such as file name, time, resonant frequency, etc.\r\n\r\n            self.file_name.set(f'{self.file_path.split('/')[-1]} : {round(self.model.duration,3)} s \\n{self.model.resonant_freq()} hertz')\r\n            self.file_label.config(text=self.file_name.get())\r\n\r\n\r\n            self.wave_plot =  FigureCanvasTkAgg(self.model.plot_waveform(),master = self._top_frame)\r\n            self.wave_plot.draw()\r\n\r\n            self.wave_plot.get_tk_widget().pack(side=tk.BOTTOM, fill = tk.BOTH, expand=1)\r\n\r\n    def Plot_spectrogram(self):\r\n        if self.file_path is not None:\r\n            if self.wave_plot is not None:\r\n                self.wave_plot.get_tk_widget().pack_forget()\r\n            self.wave_plot =  FigureCanvasTkAgg(self.model.plot_spectrogram(),master = self._top_frame)\r\n            self.wave_plot.draw()\r\n            self.wave_plot.get_tk_widget().pack(side=tk.BOTTOM, fill = tk.BOTH, expand=1)\r\n\r\n\r\n\r\n    def plot_low(self):\r\n        if self.file_path is not None:\r\n            if self.wave_plot is not None:\r\n                self.wave_plot.get_tk_widget().pack_forget()\r\n            self.wave_plot =  FigureCanvasTkAgg(self.model.plot_low_rt60(),master = self._top_frame)\r\n            self.wave_plot.draw()\r\n            self.wave_plot.get_tk_widget().pack(side=tk.BOTTOM, fill = tk.BOTH, expand=1)\r\n\r\n    def plot_mid(self):\r\n        if self.file_path is not None:\r\n            if self.wave_plot is not None:\r\n                self.wave_plot.get_tk_widget().pack_forget()\r\n            self.wave_plot =  FigureCanvasTkAgg(self.model.plot_mid_rt60(),master = self._top_frame)\r\n            self.wave_plot.draw()\r\n            self.wave_plot.get_tk_widget().pack(side=tk.BOTTOM, fill = tk.BOTH, expand=1)\r\n\r\n    def plot_high(self):\r\n        if self.file_path is not None:\r\n            if self.wave_plot is not None:\r\n                self.wave_plot.get_tk_widget().pack_forget()\r\n            self.wave_plot =  FigureCanvasTkAgg(self.model.plot_high_rt60(),master = self._top_frame)\r\n            self.wave_plot.draw()\r\n            self.wave_plot.get_tk_widget().pack(side=tk.BOTTOM, fill = tk.BOTH, expand=1)\r\n\r\n    def plot_all(self):\r\n        if self.file_path is not None:\r\n            if self.wave_plot is not None:\r\n                self.wave_plot.get_tk_widget().pack_forget()\r\n            self.wave_plot =  FigureCanvasTkAgg(self.model.plot_high_rt60(),master = self._top_frame)\r\n            self.wave_plot.draw()\r\n            self.wave_plot.get_tk_widget().pack(side=tk.BOTTOM, fill = tk.BOTH, expand=1)\r\n\r\n\r\n    def Other_Plot_Data(self):\r\n        time_status = tk.Label(self._root, text=\"Time: \" + \"foo\"+ \" seconds\")\r\n        \r\n        time_status.pack(side=tk.BOTTOM)\r\n        temp_status = tk.Label(self._root, text=\"Other Thing: \" + \"foo\"+ \" units\")\r\n        temp_status.pack(side=tk.BOTTOM)\r\n        \r\n        temp2_status = tk.Label(self._root, text=\"Other Other Thing: \" + \"foo\"+ \" units\")\r\n        temp2_status.pack(side=tk.BOTTOM)\r\n\r\n        \r\n\r\n\r\n\r\n\r\n    def print_ligma(self):\r\n        self.file_path = askopenfilename(filetypes=[(\"Audio Files\",\".wav .mp3\")])\r\n\r\n\r\n        self.model = Model()\r\n\r\n        self.model.preprocess(self.file_path)\r\n\r\n        if self.file_path != \"\":\r\n            self.Plot_wave()\r\n        \r\n\r\n\r\n
===================================================================
diff --git a/GUI.py b/GUI.py
--- a/GUI.py	(revision 3b4a5406b59c36a89bf9a03e78e3dde8de0ad76b)
+++ b/GUI.py	(date 1733599957877)
@@ -62,10 +62,10 @@
         plot_all_rt60_button.grid(row=0, column=4, padx=5, pady=2, sticky="W")
 
         waveform_button = tk.Button(self.button_frame, text='Waveform', command = self.Plot_wave)
-        waveform_button.grid(row=0, column=5, padx=5, pady=2, sticky="W")
+        waveform_button.grid(row=1, column=2, padx=5, pady=2, sticky="W")
 
         spectro_button = tk.Button(self.button_frame, text='Spectrogram', command = self.Plot_spectrogram)
-        spectro_button.grid(row=0, column=6, padx=5, pady=2, sticky="W")
+        spectro_button.grid(row=1, column=3, padx=5, pady=2, sticky="W")
 
         
         #Set up the frame for the details about the graph supporting text. 
